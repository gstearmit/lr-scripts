
/* Do not edit this file.
 *
 * If you make changes to this file while the browser is running,
 * the changes will be overwritten when the browser exits.
 *
 * To make a manual change to preferences, you can visit the URL about:config
 * For more information, see http://www.mozilla.org/unix/customizing.html#prefs
 */

// Web pages (and web servers) can ask a browser to automatically refresh a page after a 
// given timeout by including the HTML element <meta http-equiv=""refresh""> or by sending 
// a Refresh: HTTP header. This can be helpful (as in the case of a webpage whose content 
// is updated constantly) but it also can be irritating
// Automatic refreshes also have accessibility implications; sudden replacement of content 
// can be disorienting. The UAAG recommends giving users the option to disable/ignore
// automatic page refreshes for this reason. This preference allows users to block automatic
// page refreshing, instead displaying a message allowing them to manually refresh the page
		user_pref("accessibility.blockautorefresh", true);

// Originally for debugging purposes, this preference now determines whether or not Caret 
// Browsing mode is active. Caret Browsing is provided as a way to navigate through a web 
// page—using only the keyboard—by moving a text caret. This mode is more easily toggled
// by pressing [F7].
// Caret Browsing mode changes the effects of the arrow keys, as well as the [Home] and
// [End] keys. 
		user_pref("accessibility.browsewithcaret", false);

// In order to allow external applications to track what’s happening inside the browser,
// Mozilla implements an MSAA (Microsoft Active Accessibility) server. This lets outside
// programs—such as screen readers, voice recognition software, and other accessibility-
// enhancing applications—track focus changes, listen for events, and read window contents
// In its implementation, Mozilla keeps a hash table (cache) of every object it makes
// available via the MSAA server. This cache can help prevent crashes due to other
// applications improperly using the MSAA server, and may also speed up certain interactions
// with other accessibility software
// This preference exists largely for debugging purposes
//		user_pref("accessibility.disablecache", true);

// IEnumVARIANT is part of the API that allows applications to retrieve a number of accessible
// objects from the MSAA server at once. It generally improves the performance of
// communication with external applications
// This preference exists largely for debugging purposes
		user_pref("accessibility.disableenumvariant", true);

// Originally for debugging purposes, caret browsing is provided as a way to navigate through
// a web page—using only the keyboard—by moving a text caret. This mode is easily toggled by
// pressing [F7]. However, it was found that users would accidentally hit [F7] without knowing
// its effects, and then wonder why a blinking cursor appeared on every page. This preference
// determines whether or not a dialog box will be shown when entering caret browsing mode via [F7]
 		user_pref("accessibility.warn_on_browsewithcaret", false);

// This preference’s purpose is a bit vague. It’s been used for plugin-related functions, as
// well as for determining how tabs and windows should open. It is perhaps best known as a
// preference to divert URLs from external applications to open in new tabs in an existing
// browser window. The vagueness is due to the fact that this preference deals with DDE, a
// method of communication between applications (different instances of Mozilla, or Mozilla
// and the desktop shell)
// In order for Mozilla to use DDE, it must be set to handle the http protocol in Windows
// and several registry subkeys must be set correctly. This preference determines whether
// the subkeys are set while Mozilla is running and then removed upon exiting
		user_pref("advanced.system.supportDDEExec", false);

// This preference determines whether the application will auto-update
		user_pref("app.update.enabled", false);
		user_pref("app.update.auto", false);

// When a page is loaded, it can be cached so it doesn't need to be downloaded to be redisplayed.
// This preference controls whether to use the hard drive for caching purposes
// browser.cache.disk.capacity controls the maximum amount of disk space to use
// We are using PB any case
 		user_pref("browser.cache.disk.enable", false);

// Recent versions of Mozilla offer an “offline cache” that web applications can use to store
// data for retrieval even when the browser is offline. Combined with online/offline events,
// developers can write JavaScript that acts intelligently until the connection is restored
// This preference determines whether the offline cache is enabled
		user_pref("browser.cache.offline.enable", false);

// When downloading files through the Download Manager under Windows, Mozilla will add the
// downloaded file to the "Recent Documents" folder (normally accessible under the Start Menu)
// This preference allows users to enable or disable this feature
 		user_pref("browser.download.manager.addToRecentDocs", false);

// Firefox 3’s Download Manager allows downloads to be paused and resumed across browser sessions
// This opens up several options for how to handle active downloads when the browser quits
// This preference determines what will happen to files that are downloading when the user
// quits the browser.
 		user_pref("browser.download.manager.quitBehavior", 2);

// In Firefox 3, if a Windows user has an antivirus program installed, it is launched to scan files
// when they finish downloading. During testing of the feature, concerns about delays and double-
// scanning files surfaced. As a result, this preference—controlling whether the virus scan is
// automatically triggered—was created
// Starting in Firefox 3.7 (3.7a3pre nightly builds since 2010-03-06) this preference also controls
// whether or not the Windows security policy checks are applied for downloading and launching
// executable files
		user_pref("browser.download.manager.scanWhenDone", false);

// True (default): Save information entered in web page forms and the Search Bar
// False: Opposite of the above
// Note: In Firefox, this can be changed via "Tools -> Options -> Privacy / History ->? Remember
// what I enter in forms and the search bar" (Firefox 2 and above) or "Tools -> Options ->
// Privacy -> Saved Forms -> Save information I enter in forms and the Search Bar" (Firefox 1.5) 
		user_pref("browser.formfill.enable", false);

// Firefox 2.0 introduced Microsummaries for bookmarks — a way to extract a bit of information
// from a web page and display it in the bookmark’s title. This preference determines whether the
// microsummary service retrieves that information for bookmarks
// We assign false to avoid logging and updates
 		user_pref("browser.microsummary.enabled", false);

// Mozilla Firefox’s Places system keeps bookmark data in a SQLite database. When migrating from a
// version that uses a flat file to store bookmarks, this preference determines whether the old
// bookmarks are imported
 		user_pref("browser.places.importBookmarksHTML", false);

// True (default): Show an icon in the status bar when a popup has been blocked
// False: Do not show an icon in the status bar when a popup has been blocked
		user_pref("browser.popups.showPopupBlocker", false);

		user_pref("browser.privatebrowsing.dont_prompt_on_enter", true);

		user_pref("browser.privatebrowsing.autostart", false);

		user_pref("browser.privatebrowsing.keep_current_session", true);

// Firefox 2.0 incorporates the Google Safe Browsing extension in its own Phishing Protection feature
// to detect and warn users of phishy web sites. This preference switches between using a local
// blacklist to determine a site’s phishiness, or submitting the URL to a third party
// Safebrowsing creates additional not relevant requests, so desable it
		user_pref("browser.safebrowsing.enabled", false);
 		
		user_pref("browser.safebrowsing.malware.enabled", false);
		
// The latter option (“enhanced mode”) was removed with the update to the Safe Browsing protocol, and
// this preference has no effect in Firefox 3
		user_pref("browser.safebrowsing.remoteLookups", false);

// Firefox 2.0 includes a new search service which optionally logs debugging information to the
// JavaScript Console and stdout. This preference controls whether logging is active
 		user_pref("browser.search.log", false);

// In Firefox 2.0, search plugins can offer “search suggestions” of similar search queries as the user
// enters a query in the search bar. This preference controls whether or not search suggestions are
// enabled
 		user_pref("browser.search.suggest.enabled", false);

// Search plugins installed in Firefox are regularly checked for updated versions. This preference
// determines how often the update check is performed
 		user_pref("browser.search.updateinterval", -1);

// Disable search engines updates
 		user_pref("browser.search.update", false);

// Firefox 2.0 introduces a built-in Session Restore feature, allowing the user to continue browsing
// from where they left off if browser restarts. This preference controls whether the feature is on
// In load mode we don't need to save session store, so we don't use it in interactive too for
// consistency
 		user_pref("browser.sessionstore.enabled", false);
 
// Disabling all session restore options after crash and after regular FF closing
 		user_pref("browser.sessionstore.resume_from_crash", false);
 		user_pref("browser.sessionstore.max_resumed_crashes", 0);
 		user_pref("browser.sessionstore.max_tabs_undo", 0);
 		user_pref("browser.sessionstore.max_windows_undo", 0);
 		user_pref("browser.startup.page", 1);

		user_pref("browser.shell.checkDefaultBrowser", false);

// Determines what will be displayed in a new tab
//   -1: Browser startup page
//   0 (default): Blank page
//   1: Homepage
//   2: Last visited page
// Note: Does not work in Firefox 
		user_pref("browser.tabs.loadOnNewTab", 0);

// When quitting Firefox via “File ? Exit”, every open browser window will be closed. This preference
// determines (along with browser.tabs.warnOnClose) whether or not a warning dialog appears before this happens. 
		user_pref("browser.warnOnQuit", false);
		user_pref("browser.warnOnClose", false);
		user_pref("browser.warnOnOpen", false);

// This preference controls what should be loaded in newly created window. It doesn't affect what
// is loaded at startup or in new tabs
 		user_pref("browser.windows.loadOnNewWindow", 0);

// Always use an error page for sites that can't be loaded because of a network problem
		user_pref("browser.xul.error_pages.enabled", true);

// On Windows operating systems, when a program is minimized and left for a period of time, Windows
// will swap memory the program is using from RAM onto the hard disk in anticipation that other
// programs might need RAM. Because of the way Mozilla applications are stored in memory, Windows
// is much more aggressive in swapping out the memory they use, which can cause a delay when the
// program is restored. This preference determines whether to allow Windows to swap out memory from
// a minimized Mozilla application
 		user_pref("config.trim_on_minimize", false);

// JavaScript  that takes a long time to run can make the browser unresponsive. As such, a check is
// built in to allow long-running scripts to be aborted. That check is now able to differentiate
// between scripts running in web pages (content) and scripts running in the application's chrome.
// This preference determines how long scripts running from chrome are allowed to run before the
// user can choose to abort the script.
// The value is a positive integer, determining the number of seconds of execution (wall time).
// 0 and negative values are considered "forever." Default value is 20.
 		user_pref("dom.max_chrome_script_run_time", 60);

// While Firefox’s extension system is arguably the browser’s most powerful feature, it can also be
// a vector for malware. With Firefox 2.0, specific extensions can be blacklisted from a central server
// (by default, addons.mozilla.org). This preference determines whether or not Firefox will
// periodically retrieve a blocklist from the server specified in extensions.blocklist.url
 		user_pref("extensions.blocklist.enabled", false);
// Disable extensions automatic updates
 		user_pref("extensions.update.enabled", false);
 		user_pref("extensions.update.notifyUser", false);


// Color management allows images and colors to be displayed consistently across a variety of devices.
// Mozilla recognizes embedded ICC profiles in image files and uses a local color profile to perform the
// color adjustments. This preference determines if Mozilla should make these adjustments.
// The extension Color Management sets this preference through a GUI.
//   0 - Disable color management.
//   1 - Enable color management for rendered graphics.
//   2 - Enable color management for tagged graphics only. (Default)
// Note: These values apply to Firefox 3.5 and SeaMonkey 2. In previous versions, color management was
// disabled by default via the boolean preference gfx.color_management.enabled set to "false"
// * Without a properly calibrated monitor and a correct color profile, color management may actually
//   make colors look worse
		user_pref("gfx.color_management.enabled", 0);

// To enable TraceMonkie Javascript compilation on content (FF default is true)
		user_pref("javascript.options.jit.content", true);

// To enable TraceMonkie Javascript compilation on XUL/chrome (FF default is true)
		user_pref("javascript.options.jit.chrome", true);

// This preference controls whether chrome errors and warnings are logged to the JavaScript Console
		user_pref("javascript.options.showInConsole", true);
		
// When entering information in the Location Bar, Mozilla attempts to convert the information into a
// usable URI. For example, “mozilla.org” is automatically converted to “http://mozilla.org/”. When
// Mozilla is unable to discern what URL the user wanted, the information that was entered may be
// submitted to an Internet Keywords service
// This preference determines whether or not to use Internet Keywords
 		user_pref("keyword.enabled", false);

// The CSS parser now sends parse errors to the JavaScript Console — these include messages such as
// “Unknown property 'x'. Declaration dropped.”, “Error in parsing value for property 'x'
// Declaration dropped.”, and “Expected 'x' but found 'y'. Declaration dropped.”. While these messages
// are helpful to web developers for diagnosing problems with web page appearance, they tend to clutter
// the JavaScript Console. This preference allows the parse errors to be disabled
 		user_pref("layout.css.report_errors", false);

// Several Mozilla products have access to spell checking functionality. A recent patch allows this
// functionality to work in HTML text editing controls. The spell check function, when active, is
// accessible via the context menu of the text box.
// For spell checking to work, the user must have the appropriate dictionary files installed.
// This preference allows the spell check function to be enabled or disabled for multi-line and/or
// single-line edit controls, and supersedes layout.textarea.spellcheckDefault. 
// 0 - Disable spellchecker.
		user_pref("layout.spellcheckDefault", 0);

// Firefox 2.0 will include code to optionally record “browser metrics,” or usage statistics, and
// send the information back to Mozilla for analysis. The goal is that this information will aid
// developers in choosing features, designing UI behavior, identifying web sites that can cause
// and other important points of the user experience.
// This preference controls whether recorded metrics data are uploaded to the URI specified in
// problems, metrics.upload.uri
		user_pref("metrics.upload.enable", false);

// This preference determines whether to use of the operating system's NTLM implementation to
// silently authenticate the user with their Windows domain logon with proxy servers
// We would like to prompt for authentication always
 		user_pref("network.automatic-ntlm-auth.allow-proxies", false);

// This preference determines which sites are allowed to automatically authenticate via NTLM. If
// the user requests a site that authenticates with NTLM that is not in this list, the user will
// be prompted for login details
// We would like to prompt for authentication always
 		user_pref("network.automatic-ntlm-auth.trusted-uris", "");

// This preference controls when cookies expire.
//   0 - The cookie's lifetime is supplied by the server. (Default)
//   1 - The user is prompted for the cookie's lifetime.
//   2 - The cookie expires at the end of the session (when the browser closes).
//   3 - The cookie lasts for the number of days specified by network.cookie.lifetime.days
		user_pref("network.cookie.lifetimePolicy", 2);

// Previous to Firefox 0.9 and Mozilla Suite 1.7.5, the meaning of the current preference
// network.cookie.lifetimePolicy was stored in three preferences: network.cookie.lifetime.enabled,
// network.cookie.lifetime.behavior, and network.cookie.warnAboutCookies. This preference controls
// whether the deprecated preferences should be migrated to the current preference
//   true -  The deprecated preferences have been migrated.
//   false - The deprecated preferences have not been migrated. Migrate them, then set this
//           preference to true. (Default)
// * Setting this preference to false will cause your current network.cookie.lifetimePolicy to be
// overwritten. We define to use network.cookie.lifetimePolicy instead of 3 depricated settings
		user_pref("network.cookie.prefsMigrated", true);

// True - Disable IPv6 DNS lookups. (Default in Mac OS X prior to 2008-01-05, OS/2)
// False - Perform IPv6 DNS lookups on IPv6-capable OSs. (Default everywhere else)
// We expect that this preference could speed up connections
		user_pref("network.dns.disableIPv6", true);
		
// This preference controls how long to cache results
// We don't want the cache results to be deleted fast, so we use one hour, while FF default is 60.
 		user_pref("network.dnsCacheExpiration", 3600);
 		
// A popular method of disguising a website’s true location is to make use of the username/password syntax
// in URLs. Normally, when sites require authentication, users can specify the username and password directly
// in the URL thusly: http://username:password@example.com/
//(This is the same syntax that FTP URLs use.) However, this syntax can be abused to make it appear as though
// the URL is that of another host: 
// http://www.mozilla.org&login3:141592653589793238462643383279502884197169@example.com/evil
// In response to this possibility, Microsoft removed the syntax from IE. Mozilla’s response was to use a
// dialog to warn the user when visiting URLs that use the username and password syntax (but not when manually
// entering them). This preference lets you determine what is considered “phishy” enough to warrant displaying
// the dialog
		user_pref("network.http.phishy-userpass-length", 255);
		
// Determines whether to use HTTP/1.1 pipelining.
//   True: Enable pipelining
//   False (default): Disable pipelining
// Note: Pipelining is not well-supported by some servers and proxies. Things may break — use with caution
		user_pref("network.http.pipelining", false);

// Link prefetching is when a webpage hints to the browser that certain pages are likely to be visited, so the
// browser downloads them immediately so they can be displayed immediately when the user requests it
// This preference controls whether link prefetching is enabled
// We want to disable prefetching for accuracy (transactions)	
 		user_pref("network.prefetch-next", false);

// This preference determines whether a specific protocol that is already configured to be handled but
// whose behavior is not defined by a specific network.protocol-handler.external.(protocol) preference
// should be handled internally or externally.
//   true - This protocol should be handled by an external application. (Default)
//   false - This protocol should be handled internally.
//    * network.protocol-handler.expose-all or network.protocol-handler.expose.(protocol)
//     (which tell the application that this protocol should be handled in some way) must be set to true
//     for this preference to take effect.
//    * Some protocols cannot be handled internally. Attempting to load a protocol that can't be handled
//      internally does nothing.
//    * This preference only exists by default for certain protocols.
//    * The external application to run is determined by the OS on Windows and by
//      network.protocol-handler.app.(protocol) on Linux and Mac. See this article for details
		user_pref("network.protocol-handler.external-default", false);
		
// This preference determines whether a specific protocol that is already configured to be handled should
// be handled internally or externally.
//   true - This protocol should be handled by an external application.
//   false - This protocol should be handled internally. 
//   * The external application to run is determined by the OS on Windows and by
//     network.protocol-handler.app.(protocol) on Linux and Mac. See this article for details. 
// We should override this preference for predefined protocols: afp, data, disk, disks, hcp, javascript,
// mailto, moz-icon, ms-help, news, nntp, shell, snews, vbscript, vnd.ms.radio
		user_pref("network.protocol-handler.external.afp", false);
		user_pref("network.protocol-handler.external.data", false);
		user_pref("network.protocol-handler.external.disk", false);
		user_pref("network.protocol-handler.external.disks", false);
		user_pref("network.protocol-handler.external.hcp", false);
		user_pref("network.protocol-handler.external.javascript", false);
		user_pref("network.protocol-handler.external.mailto", false);
		user_pref("network.protocol-handler.external.moz-icon", false);
		user_pref("network.protocol-handler.external.ms-help", false);
		user_pref("network.protocol-handler.external.news", false);
		user_pref("network.protocol-handler.external.nntp", false);
		user_pref("network.protocol-handler.external.shell", false);
		user_pref("network.protocol-handler.external.snews", false);
		user_pref("network.protocol-handler.external.vbscript", false);
		user_pref("network.protocol-handler.external.vnd.ms.radio", false);
		
// This preference controls whether to warn the user before opening an external application for
// protocols where a more specific network.protocol-handler.warn-external.(protocol) is not set.
//  true - Give the user a chance to cancel before passing the data to the external application.
//  false - Pass the data to the external application without warning the user. 
// On one side we don't want a dialog to be open, on the other side if there is no dialog it is
// a security problem, so we choose to disable warning. 
		user_pref("network.protocol-handler.warn-external-default", false);
		
// This preference controls whether to warn the user before opening an external
// application for a specific protocol.
//   true - Give the user a chance to cancel before passing the data to the external application.
//   false - Pass the data to the external application without warning the user.
// * This preference only exists by default for certain protocols. 
// UI (Firefox): On the protocol warning dialog, "Remember my choice for all links of this type"
// We should override this preference for predefined protocols: afp, data, disk, disks, hcp, javascript,
// mailto, moz-icon, ms-help, news, nntp, shell, snews, vbscript, vnd.ms.radio
// On one side we don't want a dialog to be open, on the other side if there is no dialog it 
// is a security problem, so we choose to disable warning

		user_pref("network.protocol-handler.warn-external.afp", false);
		user_pref("network.protocol-handler.warn-external.data", false);
		user_pref("network.protocol-handler.warn-external.disk", false);
		user_pref("network.protocol-handler.warn-external.disks", false);
		user_pref("network.protocol-handler.warn-external.hcp", false);
		user_pref("network.protocol-handler.warn-external.javascript", false);
		user_pref("network.protocol-handler.warn-external.mailto", false);
		user_pref("network.protocol-handler.warn-external.moz-icon", false);
		user_pref("network.protocol-handler.warn-external.ms-help", false);
		user_pref("network.protocol-handler.warn-external.news", false);
		user_pref("network.protocol-handler.warn-external.nntp", false);
		user_pref("network.protocol-handler.warn-external.shell", false);
		user_pref("network.protocol-handler.warn-external.snews", false);
		user_pref("network.protocol-handler.warn-external.vbscript", false);
		user_pref("network.protocol-handler.warn-external.vnd.ms.radio", false);
		
//   True (default): When a plugin is needed, prompt the user
//   False: Don't prompt the user to install needed plugins
		user_pref("plugin.default_plugin_disabled", false);	
	
// Name of plugin to scan for, with a minimum version specified. By default, this preference exists for
// Acrobat (5.0), QuickTime (5.0), SunJRE (1.3), and WindowsMediaPlayer (7.0)
 		user_pref("plugin.scan.Acrobat", 999);
 		user_pref("plugin.scan.Quicktime", 999);
 		user_pref("plugin.scan.SunJRE", 999);
 		user_pref("plugin.scan.WindowsMediaPlayer", 999);
// True (default): Locate plugins by the directories specified in the Windows registry for PLIDs
// (currently HKLM\Software\MozillaPlugins\xxxPLIDxxx\Path)
// False: Opposite of the above
		user_pref("plugin.scan.plid.all", false);
//60
// Controls the scanning of the Navigator 4.x directory for plugins. When this preference is missing, the
// default is to pickup popular plugins such as Flash, Shockwave, Acrobat, and Quicktime. If set to true,
// ALL plugins will be picked up and if set to false the scan will not happen at all
 		user_pref("plugin.scan.4xPluginFolder", false);

// Skip looking for RealPlayer plugin in components folder (Netscape behavior)
		user_pref("plugin.skip_real_player_hack", true);

// In Firefox, if media embedded in the page require a plugin that is not currently installed, an information
// bar is displayed at the top of the page allowing the user to install the required plugin. This preference
// will hide the information bar even if plugins are missing
 		user_pref("plugins.hide_infobar_for_missing_plugin", true);

// Determines the popup blocker behavior.
//   1: Allow popups
//   2: Reject popups
// Note: Seems to be deprecated in favor of dom.disable_open_during_load
		user_pref("privacy.popups.policy", 1);
 		
// Firefox’s Password Manager can expose usernames and passwords on websites with cross-site forms (that is,
// HTML forms that submit to other domains). This includes many sites that will display unsanitized user-submitted
// content, such as MySpace. As an initial defense against such attacks, this preference was created to prevent
// the Password Manager from auto-filling form fields with usernames and passwords.
//   True -  Automatically fill sign-in forms with known usernames and passwords on appropriate sites. (Default)
//   False - Do not automatically fill sign-in forms with known usernames and passwords; instead, act as though
//           there are multiple usernames/password pairs remembered for the form (fill password after username has
//           been manually typed).  
// This preference is named signon.autofillForms in trunk builds, but it is likely that it will be renamed to
//  signon.prefillForms in the near future
		user_pref("signon.autofillForms", false);
		
// True - Automatically fill sign-in forms with known usernames and passwords on appropriate sites. (Default)
// False - Do not automatically fill sign-in forms with known usernames and passwords; instead, act as though there
// are multiple usernames/password pairs remembered for the form (fill password after username has been manually typed). 
// This preference is named signon.autofillForms in trunk builds, but it is likely that it will be renamed to
// signon.prefillForms in the near future
		user_pref("signon.prefillForms", false);

// RTS Support: The following settings must be defined before RTS manager initializes and overrides these values.
user_pref("browser.startup.homepage", "about:blank");
user_pref("network.dnsCacheEntries", 20);

// Imitate Firefox 3.6.3 User-Agent header
user_pref("general.useragent.extra.firefox", "Firefox/3.6.3");

// if a server requires client certificate and the Select one automatically option preference is selected,
// the client certificate will be chosen automatically and selection dialog will not prompt to the user 
user_pref("security.default_personal_cert","Select Automatically");

// Disable automatic offline mode functionality
user_pref("network.manage-offline-status", false);
